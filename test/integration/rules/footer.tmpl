];


test.describe('Integration', function () {
	'use strict';


		var server = new SeleniumServer(jar, {
			port: 4444,
			args: ['-Xmx512m']
		});

		server.start();

		var driver = new WebDriver.Builder()
		.usingServer(server.address())
		.withCapabilities(WebDriver.Capabilities.firefox())
		.build();

		for (var i = 0; i < config.length; i++) {
			test.it(config[i].description, function(testIndex) {
				return function() { runTest(driver, testIndex); };
			}(i));
		}
});

function runTest(driver, i) {
	'use strict';
	driver.get('http://localhost:9876/test/integration/rules/' + config[i].url)
	.then(function() {
		//should give an error
		driver.executeAsyncScript(function() {
			var callback = arguments[arguments.length - 1];
			dqre.a11yCheck(document, null, callback);
		})
		.then(function(result) {
			if (config[i].violations) {
				assert.equal(resultCount(result.violations, config[i].rule, config[i].violations), 
							config[i].violations.length);
			}
			if (config[i].passes) {
				assert.equal(resultCount(result.passes, config[i].rule, config[i].passes), 
							config[i].passes.length);
			}
		});
	});
}


function resultCount(result, rule, selectors) {
	'use strict';
	return result.filter(function (r) {
		if (r.id !== rule) { return false; }
		for (var i = 0; i < selectors.length; i++) {
			for (var j = 0; j  < r.nodes.length; j++) {
				if (arraysEqual(selectors[i], r.nodes[j].target)) { return true; }
			}
		}
		return false;	
	}).length;
}

function arraysEqual(a, b) {
	'use strict';
	if (a === b) return true;
	if (a === null || b === null) return false;
	if (a.length != b.length) return false;
	for (var i = 0; i < a.length; ++i) {
		if (a[i] !== b[i]) return false;
	}
	return true;
}
